# name: Build and deploy PHP app to EC2

# on:
#   push:
#     branches: [ "main" ]
#   workflow_dispatch:

# env:
#   WEBAPP_NAME: payroll-system    # set this to your application's name
#   ARTIFACT_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
#   PHP_VERSION: '8.x'                  # set this to the PHP version to use

# permissions:
#   contents: read

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v3

#       - name: Setup PHP
#         uses: shivammathur/setup-php@7c0b4c8c8ebed23eca9ec2802474895d105b11bc
#         with:
#           php-version: ${{ env.PHP_VERSION }}

#       - name: Check if composer.json exists
#         id: check_files
#         uses: andstor/file-existence-action@87d74d4732ddb824259d80c8a508c0124bf1c673
#         with:
#           files: 'composer.json'

#       - name: Get Composer Cache Directory
#         id: composer-cache
#         if: steps.check_files.outputs.files_exists == 'true'
#         run: |
#           echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

#       - name: Set up dependency caching for faster installs
#         uses: actions/cache@v3
#         if: steps.check_files.outputs.files_exists == 'true'
#         with:
#           path: ${{ steps.composer-cache.outputs.dir }}
#           key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
#           restore-keys: |
#             ${{ runner.os }}-composer-

#       - name: Run composer install if composer.json exists
#         if: steps.check_files.outputs.files_exists == 'true'
#         run: composer validate --no-check-publish && composer install --prefer-dist --no-progress

#       - name: Upload artifact for deployment job
#         uses: actions/upload-artifact@v3
#         with:
#           name: ${{env.WEBAPP_NAME}}
#           path: ${{env.ARTIFACT_PACKAGE_PATH}}

#   deploy:
#     permissions:
#       contents: none
#     runs-on: ubuntu-latest
#     needs: build
#     environment:
#       name: 'Development'
#       # url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

#     steps:
#       - name: Download artifact from build job
#         uses: actions/download-artifact@v3
#         with:
#           name: ${{env.WEBAPP_NAME}}

#       # - name: Setup SSH for EC2
#       # # - name: 'Deploy to AWS EC2'
#       # #   id: deploy-to-ec2
#       #   uses: omarhosny206/setup-ssh-for-ec2@v1.0.0
#       #   with:
#       #     # The private key of EC2 instance for SSH connection
#       #     EC2_SSH_PRIVATE_KEY: ${{secrets.EC2_PRIVATE_KEY}}
#       #     # The URL of the EC2 instance
#       #     EC2_URL: ${{EC2_URL}}

#       - name: SSH Server Deploy
#         # You may pin to the exact commit or the version.
#         # uses: kostyaten/ssh-server-deploy@e0deb814bc458a68b61f6597a865d096e33eb586
#         uses: kostyaten/ssh-server-deploy@v4
#         with:
#           # Host
#           host: ${{secrets.SSH_HOST}}
#           # Port
#           port: ${{secrets.SSH_PORT}} # optional, default is 22 
#           # Username
#           username: ${{secrets.SSH_USERNAME}}
#           # Private key
#           private_key: ${{secrets.SSH_PRIVATEKEY}}
#           # Before script
#           scp_source: .

#           scp_target: /var/www/html/payroll-automation.revvex.io

      
